{"version":3,"sources":["../../src/targets/AppImageTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, serializeToYaml, executeAppBuilder } from \"builder-util\"\nimport { UUID } from \"builder-util-runtime\"\nimport { copyOrLinkFile, unlinkIfExists } from \"builder-util/out/fs\"\nimport * as ejs from \"ejs\"\nimport { ensureDir, outputFile, readFile, symlink, writeFile } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { AppImageOptions } from \"..\"\nimport { Target } from \"../core\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport { getAppUpdatePublishConfiguration } from \"../publish/PublishManager\"\nimport { getTemplatePath } from \"../util/pathManager\"\nimport { LinuxTargetHelper } from \"./LinuxTargetHelper\"\nimport { createStageDir } from \"./targetUtil\"\n\nconst appRunTemplate = new Lazy<(data: any) => string>(async () => {\n  return ejs.compile(await readFile(path.join(getTemplatePath(\"linux\"), \"AppRun.sh\"), \"utf-8\"))\n})\n\n// https://unix.stackexchange.com/questions/375191/append-to-sub-directory-inside-squashfs-file\nexport default class AppImageTarget extends Target {\n  readonly options: AppImageOptions = {...this.packager.platformSpecificBuildOptions, ...(this.packager.config as any)[this.name]}\n  private readonly desktopEntry: Lazy<string>\n\n  constructor(ignored: string, private readonly packager: LinuxPackager, private readonly helper: LinuxTargetHelper, readonly outDir: string) {\n    super(\"appImage\")\n\n    // we add X-AppImage-BuildId to ensure that new desktop file will be installed\n    this.desktopEntry = new Lazy<string>(() => helper.computeDesktopEntry(this.options, \"AppRun\", {\n      \"X-AppImage-Version\": `${packager.appInfo.buildVersion}`,\n      \"X-AppImage-BuildId\": UUID.v1(),\n    }))\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    // https://github.com/electron-userland/electron-builder/issues/775\n    // https://github.com/electron-userland/electron-builder/issues/1726\n    // tslint:disable-next-line:no-invalid-template-strings\n    const artifactName = packager.expandArtifactNamePattern(this.options, \"AppImage\", arch, \"${name}-${version}-${arch}.${ext}\", false)\n    const artifactPath = path.join(this.outDir, artifactName)\n    this.logBuilding(\"AppImage\", artifactPath, arch)\n\n    const stageDir = await createStageDir(this, packager, arch)\n    const resourceName = `appimagekit-${this.packager.executableName}`\n    const installIcons = await this.copyIcons(stageDir.dir, resourceName)\n\n    const finalDesktopFilename = `${this.packager.executableName}.desktop`\n    await Promise.all([\n      unlinkIfExists(artifactPath),\n      writeFile(stageDir.getTempFile(\"/AppRun\"), (await appRunTemplate.value)({\n        systemIntegration: this.options.systemIntegration || \"ask\",\n        desktopFileName: finalDesktopFilename,\n        executableName: this.packager.executableName,\n        resourceName,\n        installIcons,\n      }), {\n        mode: \"0755\",\n      }),\n      writeFile(stageDir.getTempFile(finalDesktopFilename), await this.desktopEntry.value),\n    ])\n\n    // must be after this.helper.icons call\n    if (this.helper.maxIconPath == null) {\n      throw new Error(\"Icon is not provided\")\n    }\n\n    if (this.packager.packagerOptions.effectiveOptionComputed != null && await this.packager.packagerOptions.effectiveOptionComputed({desktop: await this.desktopEntry.value})) {\n      return\n    }\n\n    const publishConfig = await getAppUpdatePublishConfiguration(packager, arch, false /* in any case validation will be done on publish */)\n    if (publishConfig != null) {\n      await outputFile(path.join(packager.getResourcesDir(stageDir.getTempFile(\"app\")), \"app-update.yml\"), serializeToYaml(publishConfig))\n    }\n\n    const args = [\"appimage\", \"--stage\", stageDir.dir, \"--arch\", Arch[arch], \"--output\", artifactPath, \"--app\", appOutDir]\n    if (packager.compression === \"maximum\") {\n      args.push(\"--compression\", \"xz\")\n    }\n\n    packager.info.dispatchArtifactCreated({\n      file: artifactPath,\n      safeArtifactName: packager.computeSafeArtifactName(artifactName, \"AppImage\", arch, false),\n      target: this,\n      arch,\n      packager,\n      isWriteUpdateInfo: true,\n      updateInfo: JSON.parse(await executeAppBuilder(args)),\n    })\n  }\n\n  private async copyIcons(stageDir: string, resourceName: string): Promise<string> {\n    const iconDirRelativePath = \"usr/share/icons/hicolor\"\n    const iconDir = path.join(stageDir, iconDirRelativePath)\n    await ensureDir(iconDir)\n\n    // https://github.com/AppImage/AppImageKit/issues/438#issuecomment-319094239\n    // expects icons in the /usr/share/icons/hicolor\n    const iconNames = await BluebirdPromise.map(this.helper.icons, async icon => {\n      const filename = `${this.packager.executableName}.png`\n      const iconSizeDir = `${icon.size}x${icon.size}/apps`\n      const dir = path.join(iconDir, iconSizeDir)\n      await ensureDir(dir)\n      const finalIconFile = path.join(dir, filename)\n      await copyOrLinkFile(icon.file, finalIconFile, null, true)\n\n      if (icon.file === this.helper.maxIconPath) {\n        await symlink(path.relative(stageDir, finalIconFile), path.join(stageDir, filename))\n      }\n      return {filename, iconSizeDir, size: icon.size}\n    })\n\n    let installIcons = \"\"\n    for (const icon of iconNames) {\n      installIcons += `xdg-icon-resource install --noupdate --context apps --size ${icon.size} \"$APPDIR/${iconDirRelativePath}/${icon.iconSizeDir}/${icon.filename}\" \"${resourceName}\"\\n`\n    }\n    return installIcons\n  }\n}"],"sourceRoot":""}
