{"version":3,"sources":["../../src/util/AppFileWalker.ts"],"names":[],"mappings":";;;;;;;;;AAKA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,MAAM,mCAAmC,GAAG,KAAK,GAAG,cAApD;;AAEA,SAAA,mBAAA,CAA6B,OAA7B,EAAiD;AAC/C,MAAI,CAAC,QAAQ,uBAAT,KAAqC,QAAQ,OAAR,MAAqB,QAAQ,kBAAR,EAA1D,CAAJ,EAA6F;AAC3F,YAAQ,cAAR,CAAuB,MAAvB;AACD;;AACD,SAAO,OAAP;AACD;AAED;;;AACM,MAAA,aAAA,SAA6B,4CAA7B,CAAiD;AAGrD,cAAY,OAAZ,EAAkC,QAAlC,EAAoD;AAClD,UAAM,oBAAoB,OAApB,CAAN,EAAoC,QAApC;AAHF,SAAA,oBAAA,GAAuB,KAAvB;AAIC,GALoD,CAOrD;;;AACA,UAAQ,IAAR,EAAsB,QAAtB,EAAuC,MAAvC,EAAuD,YAAvD,EAAkF;AAChF,QAAI,SAAS,WAAT,EAAJ,EAA4B;AAC1B;AACA;AACA,UAAI,KAAK,QAAL,CAAc,gCAAd,KAAmD,CAAC,OAAO,QAAP,CAAgB,cAAhB,CAApD,IAAuF,aAAa,QAAb,CAAsB,cAAtB,CAA3F,EAAkI;AAChI,eAAO,KAAK,oBAAL,CAA0B,IAA1B,EAAgC,MAAhC,CAAP;AACD;AACF,KAND,MAOK;AACH;AACA,WAAK,QAAL,CAAc,GAAd,CAAkB,IAAlB,EAAwB,QAAxB;AACD;;AAED,WAAO,KAAK,UAAL,CAAgB,IAAhB,EAAsB,QAAtB,CAAP;AACD;;AAEO,uBAAqB,cAArB,EAA6C,MAA7C,EAA2D;AACjE,UAAM,WAAW,KAAK,QAAtB;AACA,UAAM,oBAAoB,WAAW,SAAS,MAA9C;;AACA,QAAI,iBAAJ,EAAuB;AACrB,WAAK,oBAAL,GAA4B,IAA5B;AACD;;AACD,WAAO,CAAC,oBAAoB,SAAS,cAAT,CAAwB,KAA5C,GAAoD,sDAA0B,MAA1B,CAArD,EACJ,IADI,CACC,MAAK;AACT,UAAI,SAAS,WAAT,CAAqB,OAAzB,EAAkC;AAChC,iBAAS,WAAT,CAAqB,GAArB,CAAyB,0BAA0B,MAAM,EAAzD,EAA6D,GAAG,MAAH,CAAU,MAAM,GAAG,IAAH,CAAQ,UAAR,CAAmB,cAAnB,CAAhB,EAAoD,GAApD,CAAwD,MAAM,KAAK,QAAL,CAAc,cAAd,EAA8B,GAAG,IAAjC,CAA9D,CAA7D;AACD;;AACD,aAAO,KAAK,kBAAL,CAAwB,EAAxB,CAAP;AACD,KANI,CAAP;AAOD;;AArCoD","sourcesContent":["import { FileConsumer } from \"builder-util/out/fs\"\nimport { Stats } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { FileMatcher } from \"../fileMatcher\"\nimport { Packager } from \"../packager\"\nimport { NodeModuleCopyHelper } from \"./NodeModuleCopyHelper\"\nimport { getProductionDependencies } from \"./packageDependencies\"\n\nconst nodeModulesSystemDependentSuffix = `${path.sep}node_modules`\n\nfunction addAllPatternIfNeed(matcher: FileMatcher) {\n  if (!matcher.isSpecifiedAsEmptyArray && (matcher.isEmpty() || matcher.containsOnlyIgnore())) {\n    matcher.prependPattern(\"**/*\")\n  }\n  return matcher\n}\n\n/** @internal */\nexport class AppFileWalker extends NodeModuleCopyHelper implements FileConsumer {\n  isNodeModulesHandled = false\n\n  constructor(matcher: FileMatcher, packager: Packager) {\n    super(addAllPatternIfNeed(matcher), packager)\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  consume(file: string, fileStat: Stats, parent: string, siblingNames: Array<string>): any {\n    if (fileStat.isDirectory()) {\n      // https://github.com/electron-userland/electron-builder/issues/1539\n      // but do not filter if we inside node_modules dir\n      if (file.endsWith(nodeModulesSystemDependentSuffix) && !parent.includes(\"node_modules\") && siblingNames.includes(\"package.json\")) {\n        return this.handleNodeModulesDir(file, parent)\n      }\n    }\n    else {\n      // save memory - no need to store stat for directory\n      this.metadata.set(file, fileStat)\n    }\n\n    return this.handleFile(file, fileStat)\n  }\n\n  private handleNodeModulesDir(nodeModulesDir: string, parent: string) {\n    const packager = this.packager\n    const isMainNodeModules = parent === packager.appDir\n    if (isMainNodeModules) {\n      this.isNodeModulesHandled = true\n    }\n    return (isMainNodeModules ? packager.productionDeps.value : getProductionDependencies(parent))\n      .then(it => {\n        if (packager.debugLogger.enabled) {\n          packager.debugLogger.add(`productionDependencies.${parent}`, it.filter(it => it.path.startsWith(nodeModulesDir)).map(it => path.relative(nodeModulesDir, it.path)))\n        }\n        return this.collectNodeModules(it)\n      })\n  }\n}"],"sourceRoot":""}
